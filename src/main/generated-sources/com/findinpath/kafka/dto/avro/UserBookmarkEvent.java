/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.findinpath.kafka.dto.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserBookmarkEvent extends org.apache.avro.specific.SpecificRecordBase implements
    org.apache.avro.specific.SpecificRecord {

  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"UserBookmarkEvent\",\"namespace\":\"com.findinpath.kafka.dto.avro\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"url\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}");
  private static final long serialVersionUID = 4294085315611626528L;
  private static SpecificData MODEL$ = new SpecificData();
  private static final BinaryMessageEncoder<UserBookmarkEvent> ENCODER =
      new BinaryMessageEncoder<UserBookmarkEvent>(MODEL$, SCHEMA$);
  private static final BinaryMessageDecoder<UserBookmarkEvent> DECODER =
      new BinaryMessageDecoder<UserBookmarkEvent>(MODEL$, SCHEMA$);
  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserBookmarkEvent>
      WRITER$ = (org.apache.avro.io.DatumWriter<UserBookmarkEvent>) MODEL$
      .createDatumWriter(SCHEMA$);
  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserBookmarkEvent>
      READER$ = (org.apache.avro.io.DatumReader<UserBookmarkEvent>) MODEL$
      .createDatumReader(SCHEMA$);
  private java.lang.String userId;
  private java.lang.String url;
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserBookmarkEvent() {
  }
  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param url The new value for url
   * @param timestamp The new value for timestamp
   */
  public UserBookmarkEvent(java.lang.String userId, java.lang.String url,
      java.lang.Long timestamp) {
    this.userId = userId;
    this.url = url;
    this.timestamp = timestamp;
  }

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UserBookmarkEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UserBookmarkEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserBookmarkEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Deserializes a UserBookmarkEvent from a ByteBuffer. */
  public static UserBookmarkEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /**
   * Creates a new UserBookmarkEvent RecordBuilder.
   * @return A new UserBookmarkEvent RecordBuilder
   */
  public static com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder newBuilder() {
    return new com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder();
  }

  /**
   * Creates a new UserBookmarkEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserBookmarkEvent RecordBuilder
   */
  public static com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder newBuilder(
      com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder other) {
    return new com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder(other);
  }

  /**
   * Creates a new UserBookmarkEvent RecordBuilder by copying an existing UserBookmarkEvent instance.
   * @param other The existing instance to copy.
   * @return A new UserBookmarkEvent RecordBuilder
   */
  public static com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder newBuilder(
      com.findinpath.kafka.dto.avro.UserBookmarkEvent other) {
    return new com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder(other);
  }

  /** Serializes this UserBookmarkEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return userId;
      case 1:
        return url;
      case 2:
        return timestamp;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        userId = (java.lang.String) value$;
        break;
      case 1:
        url = (java.lang.String) value$;
        break;
      case 2:
        timestamp = (java.lang.Long) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.String value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  @Override
  public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @Override
  public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  /**
   * RecordBuilder for UserBookmarkEvent instances.
   */
  public static class Builder extends
      org.apache.avro.specific.SpecificRecordBuilderBase<UserBookmarkEvent>
      implements org.apache.avro.data.RecordBuilder<UserBookmarkEvent> {

    private java.lang.String userId;
    private java.lang.String url;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserBookmarkEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.findinpath.kafka.dto.avro.UserBookmarkEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.url)) {
        this.url = data().deepCopy(fields()[1].schema(), other.url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'userId' field.
     * @return The value.
     */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     * @param value The value of 'userId'.
     * @return This builder.
     */
    public com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder setUserId(
        java.lang.String value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'userId' field has been set.
     * @return True if the 'userId' field has been set, false otherwise.
     */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'userId' field.
     * @return This builder.
     */
    public com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'url' field.
     * @return The value.
     */
    public java.lang.String getUrl() {
      return url;
    }

    /**
     * Sets the value of the 'url' field.
     * @param value The value of 'url'.
     * @return This builder.
     */
    public com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder setUrl(java.lang.String value) {
      validate(fields()[1], value);
      this.url = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'url' field has been set.
     * @return True if the 'url' field has been set, false otherwise.
     */
    public boolean hasUrl() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'url' field.
     * @return This builder.
     */
    public com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder clearUrl() {
      url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value.
     */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value The value of 'timestamp'.
     * @return This builder.
     */
    public com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'timestamp' field has been set.
     * @return True if the 'timestamp' field has been set, false otherwise.
     */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'timestamp' field.
     * @return This builder.
     */
    public com.findinpath.kafka.dto.avro.UserBookmarkEvent.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserBookmarkEvent build() {
      try {
        UserBookmarkEvent record = new UserBookmarkEvent();
        record.userId =
            fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
        record.url = fieldSetFlags()[1] ? this.url : (java.lang.String) defaultValue(fields()[1]);
        record.timestamp =
            fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

}
